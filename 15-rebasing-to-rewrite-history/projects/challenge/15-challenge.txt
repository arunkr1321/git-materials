Chapter 15 - Challenge Solution

Your challenge has two parts. The first:

You’d like to squash all of the `check0x` commits into one tidy commit. And although you _could_ follow the pattern above, where you first rearrange the commits in one rebase, and then perform the squash in a separate rebase.

But you can do this all in one rebase pass:

1. Figure out what your base ancestor is for the rebase.
2. Start an interactive rebase operation.
3. Reorder the `check0x` commits.
4. Change the `pick` rebase script command for `squash`, on all commits from the `check02` commit down to and including the `Refactoring the main check function` commit.
5. Save your work in Vim and exit.
6. Create a commit message in Vim for the squash operation.
7. Take a look at your Git log to see the changes you’ve made.

Here’s how I solved this:

1. Execute "git log --oneline" to see the commit history. Again, it makes sense to rebase on top of 69670e7 as the ancestor commit.
2. Start the interactive rebase with "git rebase -i 69670e7"
3. Use "dd" and "p" to move the lines in the rebase script around to get all of the check01 to check04 lines together.
4. Change the check02, check03, check04, Removing TODO and Refactoring the main check function commands from pick to squash.
5. Save your changes with "Escape", then ":wq", then "Enter".
6. Once you’re back into Vim to create the commit message for the squash, use "dG" to clear the buffer, press "i" to enter Insert mode, and set the message to "Creating the magic square validation function". Again, "Escape", then ":wq", then "Enter" to save your work and exit Vim.
7. Pull up your log with "git log --oneline" and you’ll see your squashed commit:

* d6a095e (wValidator) Updates to README.md
* 32cb912 Creating the magic square validation function
* 926a485 Creating utility functions for magic square validation

Nice and tidy!

The second challenge:

Now that you’ve squashed your work down to just a few commits, it’s time to get wValidator back into the `master` branch. It’s likely your first instinct is to merge `wValidator` back to `master`, but you’re a rebase guru by this point, so you’ll rebase those commits on top of `master` instead:

1. Ensure you’re on the wValidator branch.
2. Execute `git rebase` with `master` as your rebase target.
3. Crud — a conflict. Open README.md and resolve the conflict to preserve your changes, and the changes to the `## Contact` section.
4. Save your work.
5. Stage those changes with `git add README.md`.
6. Continue the rebase with `git rebase --continue`.
7. Check the log to see where `master` points and where `wValidator` points.
8. Check out the `master` branch.
9. Execute `git merge` for `wValidator`. What is special about this merge that lets you avoid a merge commit?
10. Delete the `wValidator` branch.


Here’s how I solved this challenge:

1. "git branch wValidator"
2. "git rebase master" to rebase the current branch on top of master.
3. I’ve got a conflict in README.md. So I open up that file, and see the following issue:

# Maintainers

This project is maintained by teamWYXZC:
- Will
- Yasmin
- Xanthe
- Zack
<<<<<<< HEAD
## Contact Info

For info on this project, please contact [Xanthe](mailto:xanthe@example.com).
||||||| merged common ancestors
=======
- Chris
>>>>>>> Updates to README.md

Ah, OK -- the earlier addition of the Contact section conflicts with my addition of "-Chris". I just fix up the file, preserving both sections, so it looks like this:

# Maintainers

This project is maintained by teamWYXZC:
- Will
- Yasmin
- Xanthe
- Zack
- Chris

## Contact Info

For info on this project, please contact [Xanthe](mailto:xanthe@example.com).

4. I save my changes, and exit.
5. Stage those changes with `git add README.md`.
6. Continue the rebase with `git rebase --continue`.
7. If I execute "git log --all --decorate --oneline --graph" I see the following:

* d6a095e (HEAD -> wValidator) Updates to README.md
* 32cb912 Creating the magic square validation function
* 926a485 Creating utility functions for magic square validation
| * edfcbf7 (xUtils) Starting work on the contributors section
| * d71ee79 Adding a reference to the generator script
| * da7d366 Importing the new scripts onto the html page
| * f12aa4f Adding function to check whether Square is magic
| * 92b11c0 Adding export to string to Square
| * 5758f59 Adding Square construction methods
| * 81a2bf2 Render a 2D array to a string
| * a33f5f7 Extract an array from a string
| * 49de6d7 Adding array generation utils
| | *   7086b93 (refs/stash) On master: Tools version
| | |\  
| |/ /  
|/| |   
| | * ac71a22 index on master: b336b31 Merge branch 'xReadmeUpdates'
| |/  
|/|   
* |   b336b31 (master) Merge branch 'xReadmeUpdates'
|\ \  
| * | 9df03be Adding contact details to README
* | |   7fb65ff Merge branch 'zIntegration'

The wValidator branch is at the tip of the log, and waaaay back in history is the actual "master" label.

Now you can merge master and wValidator. Remember, rebasing simply replays the commits on top of the new base; it doesn’t move the labels around. That’s why you need to merge here.

8. "git checkout master"
9. "git merge wValidator"

Git responds with :

Updating b336b31..d6a095e
Fast-forward
 README.md                    |  7 ++++++-
 js/magic_square/validator.js | 90 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 94 insertions(+), 3 deletions(-)

Aha - a fast-forward merge. That’s what’s special about this. Remember, a fast-forward merge can happen when there is nothing to merge, and a branch label can simply be moved along to the tip of the merging branch.

10. Now that the merge has completed, use "git branch -d wValidator" to delete the branch.

---
end of file